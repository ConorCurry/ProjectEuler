#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#solution using dynamic programming

#SOLVED
import time

memo = {0:1, 1:2}

def fib(n):
    if n in memo:
        return memo[n]
    else:
        memo[n] = fib(n-1) + fib(n-2)
        return memo[n]
    
t0 = time.time()
i = 0
fibsum = 0
while memo[i] < 4000000:
#while time.time() - t0 < .001:
    if fib(i+1) % 2  == 0:
        fibsum += memo[i+1]
    i += 1
    
runtime = time.time() - t0
print("Total runtime: " + repr(runtime) + "s")
print("Total iterations: " + repr(i))
print("Max fibonacci number found: " + repr(memo[i]))
print("Sum of even terms: " + repr(fibsum))
